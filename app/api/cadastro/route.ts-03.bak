import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';
import bcrypt from 'bcryptjs';

// Função para validar CNPJ .
function validarCNPJ(cnpj: string): boolean {
  cnpj = cnpj.replace(/[^\d]/g, '');
  
  if (cnpj.length !== 14) return false;
  if (/^(\d)\1{13}$/.test(cnpj)) return false;
  
  let soma = 0;
  let peso = 2;
  
  for (let i = 11; i >= 0; i--) {
    soma += parseInt(cnpj.charAt(i)) * peso;
    peso = peso === 9 ? 2 : peso + 1;
  }
  
  let resto = soma % 11;
  let digito1 = resto < 2 ? 0 : 11 - resto;
  
  if (parseInt(cnpj.charAt(12)) !== digito1) return false;
  
  soma = 0;
  peso = 2;
  
  for (let i = 12; i >= 0; i--) {
    soma += parseInt(cnpj.charAt(i)) * peso;
    peso = peso === 9 ? 2 : peso + 1;
  }
  
  resto = soma % 11;
  let digito2 = resto < 2 ? 0 : 11 - resto;
  
  return parseInt(cnpj.charAt(13)) === digito2;
}

// Função para validar CPF
function validarCPF(cpf: string): boolean {
  cpf = cpf.replace(/[^\d]/g, '');
  
  if (cpf.length !== 11) return false;
  if (/^(\d)\1{10}$/.test(cpf)) return false;
  
  let soma = 0;
  for (let i = 0; i < 9; i++) {
    soma += parseInt(cpf.charAt(i)) * (10 - i);
  }
  
  let resto = soma % 11;
  let digito1 = resto < 2 ? 0 : 11 - resto;
  
  if (parseInt(cpf.charAt(9)) !== digito1) return false;
  
  soma = 0;
  for (let i = 0; i < 10; i++) {
    soma += parseInt(cpf.charAt(i)) * (11 - i);
  }
  
  resto = soma % 11;
  let digito2 = resto < 2 ? 0 : 11 - resto;
  
  return parseInt(cpf.charAt(10)) === digito2;
}

// Função para validar e-mail
function validarEmail(email: string): boolean {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(email);
}

// Função para validar força da senha
function validarSenha(senha: string): boolean {
  // Mínimo 8 caracteres, pelo menos 1 maiúscula, 1 minúscula, 1 número e 1 especial
  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  return regex.test(senha);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validação dos campos obrigatórios
    const camposObrigatorios = [
      'email', 'senha', 'nomeResponsavel', 'cpf', 'celContato',
      'razaoSocial', 'nomeFantasia', 'cnpj', 'endereco', 'bairro',
      'cep', 'cidade', 'estado', 'cargo', 'plano'
    ];
    
    for (const campo of camposObrigatorios) {
      if (!body[campo] || body[campo].toString().trim() === '') {
        return NextResponse.json(
          { error: `Campo obrigatório: ${campo}` },
          { status: 400 }
        );
      }
    }
    
    // Validações específicas
    if (!validarEmail(body.email)) {
      return NextResponse.json(
        { error: 'E-mail inválido' },
        { status: 400 }
      );
    }
    
    if (!validarSenha(body.senha)) {
      return NextResponse.json(
        { error: 'Senha deve ter pelo menos 8 caracteres, incluindo maiúscula, minúscula, número e caractere especial' },
        { status: 400 }
      );
    }
    
    if (!validarCPF(body.cpf)) {
      return NextResponse.json(
        { error: 'CPF inválido' },
        { status: 400 }
      );
    }
    
    if (!validarCNPJ(body.cnpj)) {
      return NextResponse.json(
        { error: 'CNPJ inválido' },
        { status: 400 }
      );
    }
    
    // Verificar se e-mail já existe
    const emailExistente = await prisma.advertiser.findUnique({
      where: { email: body.email.toLowerCase().trim() }
    });
    
    if (emailExistente) {
      return NextResponse.json(
        { error: 'E-mail já cadastrado' },
        { status: 409 }
      );
    }
    
    // Hash da senha
    const senhaHash = await bcrypt.hash(body.senha, 12);
    
    // Criar anunciante
    const novoAnunciante = await prisma.advertiser.create({
      data: {
        // === DADOS BÁSICOS (CADASTRO SIMPLES) ===
        email: body.email.toLowerCase().trim(),
        nomeResponsavel: body.nomeResponsavel.trim(),
        cpf: body.cpf.replace(/[^\d]/g, ''),
        celContato: body.celContato.trim(),
        senha: senhaHash,
        planoEscolhido: body.plano,
        
        // === DADOS DA EMPRESA (CONCLUSÃO DO CADASTRO) ===
        razaoSocial: body.razaoSocial.trim(),
        nomeFantasia: body.nomeFantasia.trim(),
        cnpj: body.cnpj.replace(/[^\d]/g, ''),
        cargo: body.cargo.trim(),
        
        // === ENDEREÇO DA EMPRESA ===
        enderecoEmpresa: `${body.endereco.trim()}, ${body.bairro.trim()}`,
        bairro: body.bairro.trim(),
        cidade: body.cidade.trim(),
        estado: body.estado.trim(),
        cep: body.cep.replace(/[^\d]/g, ''),
        
        // === CONTROLE DO SISTEMA ===
        emailVerificado: false,
        statusCadastro: "cadastro_simples"
      }
    });
    
    // Determinar próximo passo baseado no plano
    const proximoPasso = body.plano === 'premium' ? 'pagamento' : 'criar-anuncio';
    
    // Log de segurança
    console.log(`[CADASTRO] Novo anunciante criado: ${novoAnunciante.id} - ${body.email} - Plano: ${body.plano}`);
    
    return NextResponse.json({
      id: novoAnunciante.id,
      message: 'Cadastro criado com sucesso',
      proximoPasso: proximoPasso
    }, { status: 201 });
    
  } catch (error) {
    console.error('[CADASTRO ERROR]', error);
    
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
