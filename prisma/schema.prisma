generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Advertiser {
  id              String    @id
  email           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  bairro          String?
  cargo           String?
  celContato      String
  celContato2     String?
  cep             String?
  cidade          String?
  cnpj            String?
  cpf             String
  descricao       String?
  emailVerificado Boolean   @default(false)
  enderecoEmpresa String?
  especialidade   String?
  estado          String?
  imagemUrl       String?
  nomeFantasia    String?
  nomeParaAnuncio String?
  nomeResponsavel String
  planoEscolhido  String
  razaoSocial     String?
  senha           String
  slogan          String?
  statusCadastro  String    @default("cadastro_simples")
  Anuncio         Anuncio[]
  Payment         Payment[]
}

model Anuncio {
  id                      String            @id
  advertiserId            String
  mercadopagoPreferenceId String            @unique
  status                  StatusAnuncio
  tituloPlano             String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime
  descricao               String?
  titulo                  String            @db.VarChar(200)
  cidade_id               String
  data_expiracao          DateTime?
  email                   String?           @db.VarChar(100)
  endereco                String
  especialidade_id        String
  imagem_principal        String?           @db.VarChar(255)
  latitude                Decimal?          @db.Decimal(10, 8)
  longitude               Decimal?          @db.Decimal(11, 8)
  plano                   String            @default("cortesia") @db.VarChar(20)
  site                    String?           @db.VarChar(200)
  telefone                String            @db.VarChar(20)
  whatsapp                String?           @db.VarChar(20)
  Advertiser              Advertiser        @relation(fields: [advertiserId], references: [id])
  cidades                 cidades           @relation(fields: [cidade_id], references: [id])
  especialidades          especialidades    @relation(fields: [especialidade_id], references: [id])
  Payment                 Payment?
  imagens_anuncio         imagens_anuncio[]

  @@index([cidade_id, especialidade_id], map: "idx_anuncios_cidade_especialidade")
  @@index([plano], map: "idx_anuncios_plano")
  @@index([status], map: "idx_anuncios_status")
}

model Payment {
  id                      String          @id
  advertiserId            String
  mercadopagoPreferenceId String          @unique
  mercadopagoPaymentId    String?         @unique
  amount                  Float
  currency                String          @default("BRL")
  planId                  String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime
  status                  statusPagamento
  Advertiser              Advertiser      @relation(fields: [advertiserId], references: [id])
  Anuncio                 Anuncio         @relation(fields: [mercadopagoPreferenceId], references: [mercadopagoPreferenceId])
}

model cidades {
  id                         String                       @id
  nome                       String                       @db.VarChar(100)
  estado_id                  String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  Anuncio                    Anuncio[]
  estados                    estados                      @relation(fields: [estado_id], references: [id], onDelete: Cascade)
  especialidades_disponiveis especialidades_disponiveis[]
  rotacao_premium            rotacao_premium[]

  @@index([estado_id], map: "idx_cidades_estado")
}

model especialidades {
  id                         String                       @id
  nome                       String                       @db.VarChar(100)
  descricao                  String?
  slug                       String                       @db.VarChar(100)
  icone                      String?                      @db.VarChar(100)
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  Anuncio                    Anuncio[]
  especialidades_disponiveis especialidades_disponiveis[]
  rotacao_premium            rotacao_premium[]
}

model especialidades_disponiveis {
  id               String         @id
  cidade_id        String
  especialidade_id String
  created_at       DateTime       @default(now())
  cidades          cidades        @relation(fields: [cidade_id], references: [id], onDelete: Cascade)
  especialidades   especialidades @relation(fields: [especialidade_id], references: [id], onDelete: Cascade)

  @@unique([cidade_id, especialidade_id])
  @@index([cidade_id], map: "idx_especialidades_disponiveis_cidade")
}

model estados {
  id         String    @id
  nome       String    @db.VarChar(50)
  sigla      String    @db.Char(2)
  created_at DateTime  @default(now())
  updated_at DateTime
  cidades    cidades[]
}

model imagens_anuncio {
  id         String   @id
  anuncio_id String
  url        String   @db.VarChar(255)
  ordem      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime
  Anuncio    Anuncio  @relation(fields: [anuncio_id], references: [id], onDelete: Cascade)
}

model rotacao_premium {
  id               String         @id
  especialidade_id String
  cidade_id        String
  ultima_posicao   Int            @default(0)
  updated_at       DateTime
  cidades          cidades        @relation(fields: [cidade_id], references: [id], onDelete: Cascade)
  especialidades   especialidades @relation(fields: [especialidade_id], references: [id], onDelete: Cascade)

  @@unique([especialidade_id, cidade_id])
}

enum StatusAnuncio {
  AGUARDANDO_PAGAMENTO
  AGUARDANDO_CADASTRO
  PUBLICADO
  PAGAMENTO_PROBLEMA
  REEMBOLSADO_POS_PUBLICACAO
  SUSPENSO_CHARGEBACK
  SUSPENSO_ADMIN
  EXPIRADO
}

enum statusPagamento {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}
