generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Advertiser {
  id              String    @id @default(cuid())
  email           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bairro          String?
  cargo           String?
  celContato      String
  celContato2     String?
  cep             String?
  cidade          String?
  cnpj            String?
  cpf             String
  descricao       String?
  emailVerificado Boolean   @default(false)
  enderecoEmpresa String?
  especialidade   String?
  estado          String?
  imagemUrl       String?
  nomeFantasia    String?
  nomeParaAnuncio String?
  nomeResponsavel String
  planoEscolhido  String
  razaoSocial     String?
  senha           String
  slogan          String?
  statusCadastro  String    @default("cadastro_simples")
  anuncios        Anuncio[]
  payments        Payment[]
}

model Payment {
  id                      String          @id @default(cuid())
  advertiserId            String
  mercadopagoPreferenceId String          @unique
  mercadopagoPaymentId    String?         @unique
  amount                  Float
  currency                String          @default("BRL")
  planId                  String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  status                  StatusPagamento
  advertiser              Advertiser      @relation(fields: [advertiserId], references: [id])
  anuncio                 Anuncio         @relation("PaymentToAnuncio", fields: [mercadopagoPreferenceId], references: [mercadopagoPreferenceId])
}

model Estado {
  id        String   @id @default(cuid())
  nome      String   @db.VarChar(50)
  sigla     String   @db.Char(2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cidades   Cidade[]

  @@map("estados")
}

model Cidade {
  id                        String                    @id @default(cuid())
  nome                      String                    @db.VarChar(100)
  estadoId                  String                    @map("estado_id")
  createdAt                 DateTime                  @default(now()) @map("created_at")
  updatedAt                 DateTime                  @updatedAt @map("updated_at")
  anuncios                  Anuncio[]
  estado                    Estado                    @relation(fields: [estadoId], references: [id], onDelete: Cascade)
  especialidadesDisponiveis EspecialidadeDisponivel[]
  rotacoesPremium           RotacaoPremium[]

  @@index([estadoId], map: "idx_cidades_estado")
  @@map("cidades")
}

model Especialidade {
  id                        String                    @id @default(cuid())
  nome                      String                    @db.VarChar(100)
  descricao                 String?
  slug                      String                    @db.VarChar(100)
  icone                     String?                   @db.VarChar(100)
  createdAt                 DateTime                  @default(now()) @map("created_at")
  updatedAt                 DateTime                  @updatedAt @map("updated_at")
  anuncios                  Anuncio[]
  especialidadesDisponiveis EspecialidadeDisponivel[]
  rotacoesPremium           RotacaoPremium[]

  @@map("especialidades")
}

model RotacaoPremium {
  id              String        @id @default(cuid())
  especialidadeId String        @map("especialidade_id")
  cidadeId        String        @map("cidade_id")
  ultimaPosicao   Int           @default(0) @map("ultima_posicao")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  cidade          Cidade        @relation(fields: [cidadeId], references: [id], onDelete: Cascade)
  especialidade   Especialidade @relation(fields: [especialidadeId], references: [id], onDelete: Cascade)

  @@unique([especialidadeId, cidadeId])
  @@map("rotacao_premium")
}

model EspecialidadeDisponivel {
  id              String        @id @default(cuid())
  cidadeId        String        @map("cidade_id")
  especialidadeId String        @map("especialidade_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  cidade          Cidade        @relation(fields: [cidadeId], references: [id], onDelete: Cascade)
  especialidade   Especialidade @relation(fields: [especialidadeId], references: [id], onDelete: Cascade)

  @@unique([cidadeId, especialidadeId])
  @@index([cidadeId], map: "idx_especialidades_disponiveis_cidade")
  @@map("especialidades_disponiveis")
}

model Anuncio {
  id                      String        @id @default(cuid())
  advertiserId            String
  mercadopagoPreferenceId String        @unique
  status                  StatusAnuncio
  tituloPlano             String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  descricao               String?
  titulo                  String        @db.VarChar(200)
  cidadeId                String        @map("cidade_id")
  dataExpiracao           DateTime?     @map("data_expiracao")
  email                   String?       @db.VarChar(100)
  endereco                String
  especialidadeId         String        @map("especialidade_id")
  imagemPrincipal         String?       @map("imagem_principal") @db.VarChar(255)
  latitude                Decimal?      @db.Decimal(10, 8)
  longitude               Decimal?      @db.Decimal(11, 8)
  plano                   String        @default("cortesia") @db.VarChar(20)
  site                    String?       @db.VarChar(200)
  telefone                String        @db.VarChar(20)
  whatsapp                String?       @db.VarChar(20)
  advertiser              Advertiser    @relation(fields: [advertiserId], references: [id])
  cidade                  Cidade        @relation(fields: [cidadeId], references: [id])
  especialidade           Especialidade @relation(fields: [especialidadeId], references: [id])
  payment                 Payment?      @relation("PaymentToAnuncio")
  imagens                 Imagem[]

  @@index([cidadeId, especialidadeId], map: "idx_anuncios_cidade_especialidade")
  @@index([plano], map: "idx_anuncios_plano")
  @@index([status], map: "idx_anuncios_status")
}

model Imagem {
  id        String   @id @default(cuid())
  anuncioId String   @map("anuncio_id")
  url       String   @db.VarChar(255)
  ordem     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  anuncio   Anuncio  @relation(fields: [anuncioId], references: [id], onDelete: Cascade)

  @@map("imagens_anuncio")
}

enum StatusPagamento {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum StatusAnuncio {
  AGUARDANDO_PAGAMENTO
  AGUARDANDO_CADASTRO
  PUBLICADO
  PAGAMENTO_PROBLEMA
  REEMBOLSADO_POS_PUBLICACAO
  SUSPENSO_CHARGEBACK
  SUSPENSO_ADMIN
  EXPIRADO
}
